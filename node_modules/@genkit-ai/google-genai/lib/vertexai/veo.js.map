{"version":3,"sources":["../../src/vertexai/veo.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionMetadata,\n  ModelReference,\n  modelActionMetadata,\n  modelRef,\n  z,\n  type Genkit,\n} from 'genkit';\nimport { BackgroundModelAction, ModelInfo } from 'genkit/model';\nimport { veoCheckOperation, veoPredict } from './client.js';\nimport {\n  fromVeoOperation,\n  toVeoModel,\n  toVeoOperationRequest,\n  toVeoPredictRequest,\n} from './converters.js';\nimport { ClientOptions, Model, VertexPluginOptions } from './types.js';\nimport { checkModelName, extractVersion } from './utils.js';\n\nexport const VeoConfigSchema = z\n  .object({\n    sampleCount: z.number().optional().describe('Number of output videos'),\n    storageUri: z\n      .string()\n      .optional()\n      .describe('The gcs bucket where to save the generated videos'),\n    fps: z\n      .number()\n      .optional()\n      .describe('Frames per second for video generation'),\n    durationSeconds: z\n      .number()\n      .optional()\n      .describe('Duration of the clip for video generation in seconds'),\n    seed: z\n      .number()\n      .optional()\n      .describe(\n        'The RNG seed. If RNG seed is exactly same for each request with unchanged ' +\n          'inputs, the prediction results will be consistent. Otherwise, a random RNG ' +\n          'seed will be used each time to produce a different result. If the sample ' +\n          'count is greater than 1, random seeds will be used for each sample.'\n      ),\n    aspectRatio: z\n      .enum(['9:16', '16:9'])\n      .optional()\n      .describe('The aspect ratio for the generated video'),\n    resolution: z\n      .enum(['720p', '1080p'])\n      .optional()\n      .describe('The resolution for the generated video'),\n    personGeneration: z\n      .enum(['dont_allow', 'allow_adult', 'allow_all'])\n      .optional()\n      .describe(\n        'Specifies the policy for generating persons in videos, including age restrictions'\n      ),\n    pubsubTopic: z\n      .string()\n      .optional()\n      .describe('The pubsub topic to publish the video generation progress to'),\n    negativePrompt: z\n      .string()\n      .optional()\n      .describe(\n        'In addition to the text context, negative prompts can be explicitly stated here to help generate the video'\n      ),\n    enhancePrompt: z\n      .boolean()\n      .optional()\n      .describe(\n        'If true, the prompt will be improved before it is used to generate videos. ' +\n          'The RNG seed, if provided, will not result in consistent results if prompts are enhanced.'\n      ),\n    generateAudio: z\n      .boolean()\n      .optional()\n      .describe('If true, audio will be generated along with the video'),\n    compressionQuality: z\n      .enum(['optimized', 'lossless'])\n      .default('optimized')\n      .optional()\n      .describe('Compression quality of the generated video'),\n  })\n  .passthrough();\nexport type VeoConfigSchemaType = typeof VeoConfigSchema;\nexport type VeoConfig = z.infer<VeoConfigSchemaType>;\n\n// This contains all the Veo config schema types\ntype ConfigSchemaType = VeoConfigSchemaType;\n\nfunction commonRef(\n  name: string,\n  info?: ModelInfo,\n  configSchema: ConfigSchemaType = VeoConfigSchema\n): ModelReference<ConfigSchemaType> {\n  return modelRef({\n    name: `vertexai/${name}`,\n    configSchema,\n    info:\n      info ??\n      ({\n        supports: {\n          media: true,\n          multiturn: false,\n          tools: false,\n          systemRole: false,\n          output: ['media'],\n          longRunning: true,\n        },\n      } as ModelInfo), // TODO(ifielker): Remove this cast if we fix longRunning\n  });\n}\n\nconst GENERIC_MODEL = commonRef('veo');\n\nconst KNOWN_MODELS = {\n  'veo-2.0-generate-001': commonRef('veo-2.0-generate-001'),\n  'veo-3.0-generate-001': commonRef('veo-3.0-generate-001'),\n  'veo-3.0-fast-generate-001': commonRef('veo-3.0-fast-generate-001'),\n  'veo-3.0-generate-preview': commonRef('veo-3.0-generate-preview'),\n  'veo-3.0-fast-generate-preview': commonRef('veo-3.0-fast-generate-preview'),\n} as const;\nexport type KnownModels = keyof typeof KNOWN_MODELS; // For autocomplete\nexport type VeoModelName = `veo-${string}`;\nexport function isVeoModelName(value?: string): value is VeoModelName {\n  return !!value?.startsWith('veo-');\n}\n\nexport function model(\n  version: string,\n  config: VeoConfig = {}\n): ModelReference<ConfigSchemaType> {\n  const name = checkModelName(version);\n  return modelRef({\n    name: `vertexai/${name}`,\n    config,\n    configSchema: VeoConfigSchema,\n    info: { ...GENERIC_MODEL.info },\n  });\n}\n\n// Takes a full list of models, filters for current Veo models only\n// and returns a modelActionMetadata for each.\nexport function listActions(models: Model[]): ActionMetadata[] {\n  return models\n    .filter((m: Model) => isVeoModelName(m.name))\n    .map((m: Model) => {\n      const ref = model(m.name);\n      return modelActionMetadata({\n        name: ref.name,\n        info: ref.info,\n        configSchema: ref.configSchema,\n      });\n    });\n}\n\nexport function defineKnownModels(\n  ai: Genkit,\n  clientOptions: ClientOptions,\n  pluginOptions?: VertexPluginOptions\n) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, clientOptions, pluginOptions);\n  }\n}\n\nexport function defineModel(\n  ai: Genkit,\n  name: string,\n  clientOptions: ClientOptions,\n  pluginOptions?: VertexPluginOptions\n): BackgroundModelAction<VeoConfigSchemaType> {\n  const ref = model(name);\n\n  return ai.defineBackgroundModel({\n    name: ref.name,\n    ...ref.info,\n    configSchema: ref.configSchema,\n    async start(request) {\n      const veoPredictRequest = toVeoPredictRequest(request);\n\n      const response = await veoPredict(\n        extractVersion(ref),\n        veoPredictRequest,\n        clientOptions\n      );\n\n      return fromVeoOperation(response);\n    },\n    async check(operation) {\n      const response = await veoCheckOperation(\n        toVeoModel(operation),\n        toVeoOperationRequest(operation),\n        clientOptions\n      );\n      return fromVeoOperation(response);\n    },\n  });\n}\n\nexport const TEST_ONLY = {\n  GENERIC_MODEL,\n  KNOWN_MODELS,\n};\n"],"mappings":"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","names":[]}