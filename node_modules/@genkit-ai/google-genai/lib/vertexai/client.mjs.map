{"version":3,"sources":["../../src/vertexai/client.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GoogleAuth } from 'google-auth-library';\nimport {\n  extractErrMsg,\n  getGenkitClientHeader,\n  processStream,\n} from '../common/utils.js';\nimport {\n  ClientOptions,\n  EmbedContentRequest,\n  EmbedContentResponse,\n  GenerateContentRequest,\n  GenerateContentResponse,\n  GenerateContentStreamResult,\n  ImagenPredictRequest,\n  ImagenPredictResponse,\n  ListModelsResponse,\n  LyriaPredictRequest,\n  LyriaPredictResponse,\n  Model,\n  VeoOperation,\n  VeoOperationRequest,\n  VeoPredictRequest,\n} from './types.js';\nimport { calculateApiKey, checkSupportedResourceMethod } from './utils.js';\n\nexport async function listModels(\n  clientOptions: ClientOptions\n): Promise<Model[]> {\n  const url = getVertexAIUrl({\n    includeProjectAndLocation: false,\n    resourcePath: 'publishers/google/models',\n    clientOptions,\n  });\n  const fetchOptions = await getFetchOptions({\n    method: 'GET',\n    clientOptions,\n  });\n  const response = await makeRequest(url, fetchOptions);\n  const modelResponse = (await response.json()) as ListModelsResponse;\n  return modelResponse.publisherModels;\n}\n\nexport async function generateContent(\n  model: string,\n  generateContentRequest: GenerateContentRequest,\n  clientOptions: ClientOptions\n): Promise<GenerateContentResponse> {\n  let url: string;\n  if (model.includes('endpoints/')) {\n    // Tuned model\n    url = getVertexAIUrl({\n      includeProjectAndLocation: !model.startsWith('projects/'),\n      resourcePath: model,\n      resourceMethod: 'generateContent',\n      clientOptions,\n    });\n  } else {\n    url = getVertexAIUrl({\n      includeProjectAndLocation: true,\n      resourcePath: `publishers/google/models/${model}`,\n      resourceMethod: 'generateContent',\n      clientOptions,\n    });\n  }\n  const fetchOptions = await getFetchOptions({\n    method: 'POST',\n    clientOptions,\n    body: JSON.stringify(generateContentRequest),\n  });\n  const response = await makeRequest(url, fetchOptions);\n\n  const responseJson = (await response.json()) as GenerateContentResponse;\n  return responseJson;\n}\n\nexport async function generateContentStream(\n  model: string,\n  generateContentRequest: GenerateContentRequest,\n  clientOptions: ClientOptions\n): Promise<GenerateContentStreamResult> {\n  let url: string;\n  if (model.includes('endpoints/')) {\n    // Tuned model\n    url = getVertexAIUrl({\n      includeProjectAndLocation: !model.startsWith('projects/'),\n      resourcePath: model,\n      resourceMethod: 'streamGenerateContent',\n      clientOptions,\n    });\n  } else {\n    url = getVertexAIUrl({\n      includeProjectAndLocation: true,\n      resourcePath: `publishers/google/models/${model}`,\n      resourceMethod: 'streamGenerateContent',\n      clientOptions,\n    });\n  }\n  const fetchOptions = await getFetchOptions({\n    method: 'POST',\n    clientOptions,\n    body: JSON.stringify(generateContentRequest),\n  });\n  const response = await makeRequest(url, fetchOptions);\n  return processStream(response);\n}\n\nasync function internalPredict(\n  model: string,\n  body: string,\n  clientOptions: ClientOptions\n): Promise<Response> {\n  const url = getVertexAIUrl({\n    includeProjectAndLocation: true,\n    resourcePath: `publishers/google/models/${model}`,\n    resourceMethod: 'predict',\n    clientOptions,\n  });\n\n  const fetchOptions = await getFetchOptions({\n    method: 'POST',\n    clientOptions,\n    body,\n  });\n\n  return await makeRequest(url, fetchOptions);\n}\n\nexport async function embedContent(\n  model: string,\n  embedContentRequest: EmbedContentRequest,\n  clientOptions: ClientOptions\n): Promise<EmbedContentResponse> {\n  const response = await internalPredict(\n    model,\n    JSON.stringify(embedContentRequest),\n    clientOptions\n  );\n  return response.json() as Promise<EmbedContentResponse>;\n}\n\nexport async function imagenPredict(\n  model: string,\n  imagenPredictRequest: ImagenPredictRequest,\n  clientOptions: ClientOptions\n): Promise<ImagenPredictResponse> {\n  const response = await internalPredict(\n    model,\n    JSON.stringify(imagenPredictRequest),\n    clientOptions\n  );\n  return response.json() as Promise<ImagenPredictResponse>;\n}\n\nexport async function lyriaPredict(\n  model: string,\n  lyriaPredictRequest: LyriaPredictRequest,\n  clientOptions: ClientOptions\n): Promise<LyriaPredictResponse> {\n  const response = await internalPredict(\n    model,\n    JSON.stringify(lyriaPredictRequest),\n    clientOptions\n  );\n  return response.json() as Promise<LyriaPredictResponse>;\n}\n\nexport async function veoPredict(\n  model: string,\n  veoPredictRequest: VeoPredictRequest,\n  clientOptions: ClientOptions\n): Promise<VeoOperation> {\n  const url = getVertexAIUrl({\n    includeProjectAndLocation: true,\n    resourcePath: `publishers/google/models/${model}`,\n    resourceMethod: 'predictLongRunning',\n    clientOptions,\n  });\n\n  const fetchOptions = await getFetchOptions({\n    method: 'POST',\n    clientOptions,\n    body: JSON.stringify(veoPredictRequest),\n  });\n\n  const response = await makeRequest(url, fetchOptions);\n  return response.json() as Promise<VeoOperation>;\n}\n\nexport async function veoCheckOperation(\n  model: string,\n  veoOperationRequest: VeoOperationRequest,\n  clientOptions: ClientOptions\n): Promise<VeoOperation> {\n  const url = getVertexAIUrl({\n    includeProjectAndLocation: true,\n    resourcePath: `publishers/google/models/${model}`,\n    resourceMethod: 'fetchPredictOperation',\n    clientOptions,\n  });\n  const fetchOptions = await getFetchOptions({\n    method: 'POST',\n    clientOptions,\n    body: JSON.stringify(veoOperationRequest),\n  });\n\n  const response = await makeRequest(url, fetchOptions);\n  return response.json() as Promise<VeoOperation>;\n}\n\nexport function getVertexAIUrl(params: {\n  includeProjectAndLocation: boolean; // False for listModels, true for most others\n  resourcePath: string;\n  resourceMethod?: string;\n  queryParams?: string;\n  clientOptions: ClientOptions;\n}): string {\n  checkSupportedResourceMethod(params);\n\n  const DEFAULT_API_VERSION = 'v1beta1';\n  const API_BASE_PATH = 'aiplatform.googleapis.com';\n\n  let basePath: string;\n\n  if (params.clientOptions.kind == 'regional') {\n    basePath = `${params.clientOptions.location}-${API_BASE_PATH}`;\n  } else {\n    basePath = API_BASE_PATH;\n  }\n\n  let resourcePath = params.resourcePath;\n  if (\n    params.clientOptions.kind != 'express' &&\n    params.includeProjectAndLocation\n  ) {\n    const parent = `projects/${params.clientOptions.projectId}/locations/${params.clientOptions.location}`;\n    resourcePath = `${parent}/${params.resourcePath}`;\n  }\n\n  let url = `https://${basePath}/${DEFAULT_API_VERSION}/${resourcePath}`;\n  if (params.resourceMethod) {\n    url += `:${params.resourceMethod}`;\n  }\n\n  let joiner = '?';\n  if (params.queryParams) {\n    url += `${joiner}${params.queryParams}`;\n    joiner = '&';\n  }\n  if (params.resourceMethod === 'streamGenerateContent') {\n    url += `${joiner}alt=sse`;\n    joiner = '&';\n  }\n  return url;\n}\n\nasync function getFetchOptions(params: {\n  method: 'POST' | 'GET';\n  body?: string;\n  clientOptions: ClientOptions;\n}) {\n  const fetchOptions: RequestInit = {\n    method: params.method,\n    headers: await getHeaders(params.clientOptions),\n  };\n  if (params.body) {\n    fetchOptions.body = params.body;\n  }\n  const signal = getAbortSignal(params.clientOptions);\n  if (signal) {\n    fetchOptions.signal = signal;\n  }\n  return fetchOptions;\n}\n\nfunction getAbortSignal(clientOptions: ClientOptions): AbortSignal | undefined {\n  const hasTimeout = (clientOptions.timeout ?? -1) >= 0;\n  if (clientOptions.signal !== undefined || hasTimeout) {\n    const controller = new AbortController();\n    if (hasTimeout) {\n      setTimeout(() => controller.abort(), clientOptions.timeout);\n    }\n    if (clientOptions?.signal) {\n      clientOptions.signal.addEventListener('abort', () => {\n        controller.abort();\n      });\n    }\n    return controller.signal;\n  }\n  return undefined;\n}\n\nasync function getHeaders(clientOptions: ClientOptions): Promise<HeadersInit> {\n  if (clientOptions.kind == 'express') {\n    const headers: HeadersInit = {\n      'x-goog-api-key': calculateApiKey(clientOptions.apiKey, undefined),\n      'Content-Type': 'application/json',\n      'X-Goog-Api-Client': getGenkitClientHeader(),\n      'User-Agent': getGenkitClientHeader(),\n    };\n    return headers;\n  } else {\n    const token = await getToken(clientOptions.authClient);\n    const headers: HeadersInit = {\n      Authorization: `Bearer ${token}`,\n      'x-goog-user-project': clientOptions.projectId,\n      'Content-Type': 'application/json',\n      'X-Goog-Api-Client': getGenkitClientHeader(),\n      'User-Agent': getGenkitClientHeader(),\n    };\n    if (clientOptions.apiKey) {\n      headers['x-goog-api-key'] = clientOptions.apiKey;\n    }\n    return headers;\n  }\n}\n\nasync function getToken(authClient: GoogleAuth): Promise<string> {\n  const CREDENTIAL_ERROR_MESSAGE =\n    '\\nUnable to authenticate your request\\\n        \\nDepending on your run time environment, you can get authentication by\\\n        \\n- if in local instance or cloud shell: `!gcloud auth login`\\\n        \\n- if in Colab:\\\n        \\n    -`from google.colab import auth`\\\n        \\n    -`auth.authenticate_user()`\\\n        \\n- if in service account or other: please follow guidance in https://cloud.google.com/docs/authentication';\n  const token = await authClient.getAccessToken().catch((e) => {\n    throw new Error(CREDENTIAL_ERROR_MESSAGE, e);\n  });\n  if (!token) {\n    throw new Error(CREDENTIAL_ERROR_MESSAGE);\n  }\n  return token;\n}\n\nasync function makeRequest(\n  url: string,\n  fetchOptions: RequestInit\n): Promise<Response> {\n  try {\n    const response = await fetch(url, fetchOptions);\n    if (!response.ok) {\n      let errorText = await response.text();\n      let errorMessage = errorText;\n      try {\n        const json = JSON.parse(errorText);\n        if (json.error && json.error.message) {\n          errorMessage = json.error.message;\n        }\n      } catch (e) {\n        // Not JSON or expected format, use the raw text\n      }\n      throw new Error(\n        `Error fetching from ${url}: [${response.status} ${response.statusText}] ${errorMessage}`\n      );\n    }\n    return response;\n  } catch (e: unknown) {\n    console.error(e);\n    throw new Error(`Failed to fetch from ${url}: ${extractErrMsg(e)}`);\n  }\n}\n\nexport const TEST_ONLY = {\n  getFetchOptions,\n  getAbortSignal,\n  getHeaders,\n  makeRequest,\n};\n"],"mappings":"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","names":[]}