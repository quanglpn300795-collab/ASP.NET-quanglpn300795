{"version":3,"sources":["../../src/vertexai/lyria.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionMetadata,\n  Genkit,\n  modelActionMetadata,\n  modelRef,\n  ModelReference,\n  z,\n} from 'genkit';\nimport { ModelAction, ModelInfo } from 'genkit/model';\nimport { lyriaPredict } from './client.js';\nimport { fromLyriaResponse, toLyriaPredictRequest } from './converters.js';\nimport { ClientOptions, Model, VertexPluginOptions } from './types.js';\nimport { checkModelName, extractVersion } from './utils.js';\n\nexport const LyriaConfigSchema = z\n  .object({\n    negativePrompt: z\n      .string()\n      .optional()\n      .describe(\n        'Optional. A description of what to exclude from the generated audio.'\n      ),\n    seed: z\n      .number()\n      .optional()\n      .describe(\n        'Optional. A seed for deterministic generation. If provided, the model will attempt to produce the same audio given the same prompt and other parameters. Cannot be used with sample_count in the same request.'\n      ),\n    sampleCount: z\n      .number()\n      .optional()\n      .describe(\n        'Optional. The number of audio samples to generate. Default is 1 if not specified and seed is not used. Cannot be used with seed in the same request.'\n      ),\n  })\n  .passthrough();\nexport type LyriaConfigSchemaType = typeof LyriaConfigSchema;\nexport type LyriaConfig = z.infer<LyriaConfigSchemaType>;\n\ntype ConfigSchemaType = LyriaConfigSchemaType;\n\nfunction commonRef(\n  name: string,\n  info?: ModelInfo,\n  configSchema: ConfigSchemaType = LyriaConfigSchema\n): ModelReference<ConfigSchemaType> {\n  return modelRef({\n    name: `vertexai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        media: true,\n        multiturn: false,\n        tools: false,\n        systemRole: false,\n        output: ['media'],\n      },\n    },\n  });\n}\n\nconst GENERIC_MODEL = commonRef('lyria');\n\nconst KNOWN_MODELS = {\n  'lyria-002': commonRef('lyria-002'),\n} as const;\nexport type KnownModels = keyof typeof KNOWN_MODELS; // For autocorrect\nexport type LyriaModelName = `lyria-${string}`;\nexport function isLyriaModelName(value?: string): value is LyriaModelName {\n  return !!value?.startsWith('lyria-');\n}\n\nexport function model(\n  version: string,\n  config: LyriaConfig = {}\n): ModelReference<ConfigSchemaType> {\n  const name = checkModelName(version);\n  return modelRef({\n    name: `vertexai/${name}`,\n    config,\n    configSchema: LyriaConfigSchema,\n    info: { ...GENERIC_MODEL.info },\n  });\n}\n\nexport function listActions(models: Model[]): ActionMetadata[] {\n  return models\n    .filter((m: Model) => isLyriaModelName(m.name))\n    .map((m: Model) => {\n      const ref = model(m.name);\n      return modelActionMetadata({\n        name: ref.name,\n        info: ref.info,\n        configSchema: ref.configSchema,\n      });\n    });\n}\n\nexport function defineKnownModels(\n  ai: Genkit,\n  clientOptions: ClientOptions,\n  pluginOptions?: VertexPluginOptions\n) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, clientOptions, pluginOptions);\n  }\n}\n\nexport function defineModel(\n  ai: Genkit,\n  name: string,\n  clientOptions: ClientOptions,\n  pluginOptions?: VertexPluginOptions\n): ModelAction {\n  const ref = model(name);\n\n  return ai.defineModel(\n    {\n      apiVersion: 'v2',\n      name: ref.name,\n      ...ref.info,\n      configSchema: ref.configSchema,\n    },\n    async (request, { abortSignal }) => {\n      const clientOpt = { ...clientOptions, signal: abortSignal };\n      const lyriaPredictRequest = toLyriaPredictRequest(request);\n\n      const response = await lyriaPredict(\n        extractVersion(ref),\n        lyriaPredictRequest,\n        clientOpt\n      );\n\n      if (!response.predictions || response.predictions.length == 0) {\n        throw new Error(\n          'Model returned no predictions. Possibly due to content filters.'\n        );\n      }\n\n      return fromLyriaResponse(response, request);\n    }\n  );\n}\n\nexport const TEST_ONLY = {\n  GENERIC_MODEL,\n  KNOWN_MODELS,\n};\n"],"mappings":"AAgBA;AAAA,EAGE;AAAA,EACA;AAAA,EAEA;AAAA,OACK;AAEP,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB,6BAA6B;AAEzD,SAAS,gBAAgB,sBAAsB;AAExC,MAAM,oBAAoB,EAC9B,OAAO;AAAA,EACN,gBAAgB,EACb,OAAO,EACP,SAAS,EACT;AAAA,IACC;AAAA,EACF;AAAA,EACF,MAAM,EACH,OAAO,EACP,SAAS,EACT;AAAA,IACC;AAAA,EACF;AAAA,EACF,aAAa,EACV,OAAO,EACP,SAAS,EACT;AAAA,IACC;AAAA,EACF;AACJ,CAAC,EACA,YAAY;AAMf,SAAS,UACP,MACA,MACA,eAAiC,mBACC;AAClC,SAAO,SAAS;AAAA,IACd,MAAM,YAAY,IAAI;AAAA,IACtB;AAAA,IACA,MAAM,QAAQ;AAAA,MACZ,UAAU;AAAA,QACR,OAAO;AAAA,QACP,WAAW;AAAA,QACX,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,QAAQ,CAAC,OAAO;AAAA,MAClB;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,MAAM,gBAAgB,UAAU,OAAO;AAEvC,MAAM,eAAe;AAAA,EACnB,aAAa,UAAU,WAAW;AACpC;AAGO,SAAS,iBAAiB,OAAyC;AACxE,SAAO,CAAC,CAAC,OAAO,WAAW,QAAQ;AACrC;AAEO,SAAS,MACd,SACA,SAAsB,CAAC,GACW;AAClC,QAAM,OAAO,eAAe,OAAO;AACnC,SAAO,SAAS;AAAA,IACd,MAAM,YAAY,IAAI;AAAA,IACtB;AAAA,IACA,cAAc;AAAA,IACd,MAAM,EAAE,GAAG,cAAc,KAAK;AAAA,EAChC,CAAC;AACH;AAEO,SAAS,YAAY,QAAmC;AAC7D,SAAO,OACJ,OAAO,CAAC,MAAa,iBAAiB,EAAE,IAAI,CAAC,EAC7C,IAAI,CAAC,MAAa;AACjB,UAAM,MAAM,MAAM,EAAE,IAAI;AACxB,WAAO,oBAAoB;AAAA,MACzB,MAAM,IAAI;AAAA,MACV,MAAM,IAAI;AAAA,MACV,cAAc,IAAI;AAAA,IACpB,CAAC;AAAA,EACH,CAAC;AACL;AAEO,SAAS,kBACd,IACA,eACA,eACA;AACA,aAAW,QAAQ,OAAO,KAAK,YAAY,GAAG;AAC5C,gBAAY,IAAI,MAAM,eAAe,aAAa;AAAA,EACpD;AACF;AAEO,SAAS,YACd,IACA,MACA,eACA,eACa;AACb,QAAM,MAAM,MAAM,IAAI;AAEtB,SAAO,GAAG;AAAA,IACR;AAAA,MACE,YAAY;AAAA,MACZ,MAAM,IAAI;AAAA,MACV,GAAG,IAAI;AAAA,MACP,cAAc,IAAI;AAAA,IACpB;AAAA,IACA,OAAO,SAAS,EAAE,YAAY,MAAM;AAClC,YAAM,YAAY,EAAE,GAAG,eAAe,QAAQ,YAAY;AAC1D,YAAM,sBAAsB,sBAAsB,OAAO;AAEzD,YAAM,WAAW,MAAM;AAAA,QACrB,eAAe,GAAG;AAAA,QAClB;AAAA,QACA;AAAA,MACF;AAEA,UAAI,CAAC,SAAS,eAAe,SAAS,YAAY,UAAU,GAAG;AAC7D,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,aAAO,kBAAkB,UAAU,OAAO;AAAA,IAC5C;AAAA,EACF;AACF;AAEO,MAAM,YAAY;AAAA,EACvB;AAAA,EACA;AACF;","names":[]}