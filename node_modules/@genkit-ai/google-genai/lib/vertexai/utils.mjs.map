{"version":3,"sources":["../../src/vertexai/utils.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenkitError } from 'genkit';\nimport { GoogleAuth } from 'google-auth-library';\nimport type {\n  ClientOptions,\n  ExpressClientOptions,\n  GlobalClientOptions,\n  RegionalClientOptions,\n  VertexPluginOptions,\n} from './types.js';\n\nexport {\n  checkModelName,\n  checkSupportedMimeType,\n  cleanSchema,\n  extractMedia,\n  extractMimeType,\n  extractText,\n  extractVersion,\n  modelName,\n} from '../common/utils.js';\n\nconst CLOUD_PLATFORM_OAUTH_SCOPE =\n  'https://www.googleapis.com/auth/cloud-platform';\n\nfunction parseFirebaseProjectId(): string | undefined {\n  if (!process.env.FIREBASE_CONFIG) return undefined;\n  try {\n    return JSON.parse(process.env.FIREBASE_CONFIG).projectId as string;\n  } catch {\n    return undefined;\n  }\n}\n\nlet __mockDerivedOptions: ClientOptions | undefined = undefined;\nfunction setMockDerivedOptions(options: ClientOptions | undefined): void {\n  __mockDerivedOptions = options;\n}\nexport const TEST_ONLY = { setMockDerivedOptions };\n\nexport async function getDerivedOptions(\n  options?: VertexPluginOptions,\n  AuthClass: typeof GoogleAuth = GoogleAuth // Injectable testing\n): Promise<ClientOptions> {\n  if (__mockDerivedOptions) {\n    return Promise.resolve(__mockDerivedOptions);\n  }\n\n  // Figure out the type of preferred options if possible\n  // The order of the if statements is important.\n  if (options?.location == 'global') {\n    return await getGlobalDerivedOptions(AuthClass, options);\n  } else if (options?.location) {\n    return await getRegionalDerivedOptions(AuthClass, options);\n  } else if (options?.apiKey !== undefined) {\n    // apiKey = false still indicates apiKey expectation\n    return getExpressDerivedOptions(options);\n  }\n\n  // If we got here then we're relying on environment variables.\n  // Try regional first, it's the most common usage.\n  try {\n    const regionalOptions = await getRegionalDerivedOptions(AuthClass, options);\n    return regionalOptions;\n  } catch (e: unknown) {\n    /* no-op - try global next */\n  }\n  try {\n    const globalOptions = await getGlobalDerivedOptions(AuthClass, options);\n    return globalOptions;\n  } catch (e: unknown) {\n    /* no-op - try express last */\n  }\n  try {\n    const expressOptions = getExpressDerivedOptions(options);\n    return expressOptions;\n  } catch (e: unknown) {\n    /* no-op */\n  }\n\n  // We did not have enough information in the options or in environment variables\n  // to properly determine client options.\n  throw new GenkitError({\n    status: 'INVALID_ARGUMENT',\n    message:\n      'Unable to determine client options. Please set either apiKey or projectId and location',\n  });\n}\n\nasync function getGlobalDerivedOptions(\n  AuthClass: typeof GoogleAuth,\n  options?: VertexPluginOptions\n): Promise<GlobalClientOptions> {\n  let authOptions = options?.googleAuth;\n  let authClient: GoogleAuth;\n  const providedProjectId =\n    options?.projectId ||\n    process.env.GCLOUD_PROJECT ||\n    parseFirebaseProjectId();\n  if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {\n    const serviceAccountCreds = JSON.parse(\n      process.env.GCLOUD_SERVICE_ACCOUNT_CREDS\n    );\n    authOptions = {\n      credentials: serviceAccountCreds,\n      scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],\n      projectId: providedProjectId,\n    };\n    authClient = new AuthClass(authOptions);\n  } else {\n    authClient = new AuthClass(\n      authOptions ?? {\n        scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],\n        projectId: providedProjectId,\n      }\n    );\n  }\n\n  const projectId =\n    options?.projectId ||\n    process.env.GCLOUD_PROJECT ||\n    (await authClient.getProjectId());\n\n  if (!projectId) {\n    throw new Error(\n      `VertexAI Plugin is missing the 'project' configuration. Please set the 'GCLOUD_PROJECT' environment variable or explicitly pass 'project' into genkit config.`\n    );\n  }\n\n  const clientOpt: GlobalClientOptions = {\n    kind: 'global',\n    location: 'global',\n    projectId,\n    authClient,\n  };\n  if (options?.apiKey) {\n    clientOpt.apiKey = options.apiKey;\n  }\n\n  return clientOpt;\n}\n\nfunction getExpressDerivedOptions(\n  options?: VertexPluginOptions\n): ExpressClientOptions {\n  const apiKey = checkApiKey(options?.apiKey);\n  return {\n    kind: 'express',\n    apiKey,\n  };\n}\n\nasync function getRegionalDerivedOptions(\n  AuthClass: typeof GoogleAuth,\n  options?: VertexPluginOptions\n): Promise<RegionalClientOptions> {\n  let authOptions = options?.googleAuth;\n  let authClient: GoogleAuth;\n  const providedProjectId =\n    options?.projectId ||\n    process.env.GCLOUD_PROJECT ||\n    parseFirebaseProjectId();\n  if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {\n    const serviceAccountCreds = JSON.parse(\n      process.env.GCLOUD_SERVICE_ACCOUNT_CREDS\n    );\n    authOptions = {\n      credentials: serviceAccountCreds,\n      scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],\n      projectId: providedProjectId,\n    };\n    authClient = new AuthClass(authOptions);\n  } else {\n    authClient = new AuthClass(\n      authOptions ?? {\n        scopes: [CLOUD_PLATFORM_OAUTH_SCOPE],\n        projectId: providedProjectId,\n      }\n    );\n  }\n\n  const projectId =\n    options?.projectId ||\n    process.env.GCLOUD_PROJECT ||\n    (await authClient.getProjectId());\n  const location =\n    options?.location || process.env.GCLOUD_LOCATION || 'us-central1';\n\n  if (!location) {\n    throw new Error(\n      `VertexAI Plugin is missing the 'location' configuration. Please set the 'GCLOUD_LOCATION' environment variable or explicitly pass 'location' into genkit config.`\n    );\n  }\n  if (!projectId) {\n    throw new Error(\n      `VertexAI Plugin is missing the 'project' configuration. Please set the 'GCLOUD_PROJECT' environment variable or explicitly pass 'project' into genkit config.`\n    );\n  }\n\n  const clientOpt: RegionalClientOptions = {\n    kind: 'regional',\n    location,\n    projectId,\n    authClient,\n  };\n  if (options?.apiKey) {\n    clientOpt.apiKey = options.apiKey;\n  }\n  return clientOpt;\n}\n\n/**\n * Retrieves an API key from environment variables.\n *\n * @returns The API key as a string, or `undefined` if none of the specified\n *          environment variables are set.\n */\nexport function getApiKeyFromEnvVar(): string | undefined {\n  return (\n    process.env.VERTEX_API_KEY ||\n    process.env.GOOGLE_API_KEY ||\n    process.env.GOOGLE_GENAI_API_KEY\n  );\n}\n\nexport const MISSING_API_KEY_ERROR = new GenkitError({\n  status: 'FAILED_PRECONDITION',\n  message:\n    'Please pass in the API key or set the VERTEX_API_KEY or GOOGLE_API_KEY environment variable.\\n' +\n    'For more details see https://firebase.google.com/docs/genkit/plugins/google-genai',\n});\n\nexport const API_KEY_FALSE_ERROR = new GenkitError({\n  status: 'INVALID_ARGUMENT',\n  message:\n    'VertexAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.',\n});\n\nexport const NOT_SUPPORTED_IN_EXPRESS_ERROR = new GenkitError({\n  status: 'PERMISSION_DENIED',\n  message:\n    'This method or model is not supported in Vertex AI Express Mode.\\n' +\n    'For more details see https://cloud.google.com/vertex-ai/generative-ai/docs/start/express-mode/vertex-ai-express-mode-api-reference',\n});\n\n/**\n * Checks and retrieves an API key based on the provided argument and environment variables.\n *\n * - If `pluginApiKey` is a non-empty string, it's used as the API key.\n * - If `pluginApiKey` is `undefined` or an empty string, it attempts to fetch the API key from environment\n * - If `pluginApiKey` is `false`, key retrieval from the environment is skipped, and the function\n *   will return `undefined`. This mode indicates that the API key is expected to be provided\n *   at a later stage or in a different context.\n *\n * @param pluginApiKey - An optional API key string, `undefined` to check the environment, or `false` to bypass all checks in this function.\n * @returns The resolved API key as a string, or `undefined` if `pluginApiKey` is `false`.\n * @throws {Error} MISSING_API_KEY_ERROR - Thrown if `pluginApiKey` is not `false` and no API key\n *   can be found either in the `pluginApiKey` argument or from the environment.\n */\nexport function checkApiKey(\n  pluginApiKey: string | false | undefined\n): string | undefined {\n  let apiKey: string | undefined;\n\n  // Don't get the key from the environment if pluginApiKey is false\n  if (pluginApiKey !== false) {\n    apiKey = pluginApiKey || getApiKeyFromEnvVar();\n  }\n\n  // If pluginApiKey is false, then we don't throw because we are waiting for\n  // the apiKey passed into the individual call\n  if (pluginApiKey !== false && !apiKey) {\n    throw MISSING_API_KEY_ERROR;\n  }\n  return apiKey;\n}\n\n/**\n * Calculates and returns the effective API key based on multiple potential sources.\n * The order of precedence for determining the API key is:\n * 1. `requestApiKey` (if provided)\n * 2. `pluginApiKey` (if provided and not `false`)\n * 3. Environment variable (if `pluginApiKey` is not `false` and `pluginApiKey` is not provided)\n *\n * @param pluginApiKey - The apiKey value provided during plugin initialization.\n * @param requestApiKey - The apiKey provided to an individual generate call.\n * @returns The resolved API key as a string.\n * @throws {Error} API_KEY_FALSE_ERROR - Thrown if `pluginApiKey` is `false` and `requestApiKey` is not provided\n * @throws {Error} MISSING_API_KEY_ERROR - Thrown if no API key can be resolved from any source\n */\nexport function calculateApiKey(\n  pluginApiKey: string | false | undefined,\n  requestApiKey: string | undefined\n): string {\n  let apiKey: string | undefined;\n\n  // Don't get the key from the environment if pluginApiKey is false\n  if (pluginApiKey !== false) {\n    apiKey = pluginApiKey || getApiKeyFromEnvVar();\n  }\n\n  apiKey = requestApiKey || apiKey;\n\n  if (pluginApiKey === false && !requestApiKey) {\n    throw API_KEY_FALSE_ERROR;\n  }\n\n  if (!apiKey) {\n    throw MISSING_API_KEY_ERROR;\n  }\n  return apiKey;\n}\n\n/** Vertex Express Mode lets you try a *subset* of Vertex AI features */\nexport function checkSupportedResourceMethod(params: {\n  clientOptions: ClientOptions;\n  resourcePath?: string;\n  resourceMethod?: string;\n}) {\n  if (params.resourcePath == '') {\n    // This is how we get a base url for metadata\n    return;\n  }\n\n  const supportedExpressMethods = [\n    'countTokens',\n    'generateContent',\n    'streamGenerateContent',\n  ];\n\n  if (\n    params.clientOptions.kind === 'express' &&\n    (!supportedExpressMethods.includes(params.resourceMethod ?? '') ||\n      params.resourcePath?.includes('endpoints/'))\n  ) {\n    throw NOT_SUPPORTED_IN_EXPRESS_ERROR;\n  }\n}\n"],"mappings":"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","names":[]}