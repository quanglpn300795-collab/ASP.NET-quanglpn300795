{"version":3,"sources":["../../src/googleai/gemini.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionMetadata,\n  Genkit,\n  GenkitError,\n  modelActionMetadata,\n  z,\n} from 'genkit';\nimport {\n  GenerationCommonConfigDescriptions,\n  GenerationCommonConfigSchema,\n  ModelAction,\n  ModelInfo,\n  ModelMiddleware,\n  ModelReference,\n  getBasicUsageStats,\n  modelRef,\n} from 'genkit/model';\nimport { downloadRequestMedia } from 'genkit/model/middleware';\nimport { runInNewSpan } from 'genkit/tracing';\nimport {\n  fromGeminiCandidate,\n  toGeminiFunctionModeEnum,\n  toGeminiMessage,\n  toGeminiSystemInstruction,\n  toGeminiTool,\n} from '../common/converters.js';\nimport {\n  generateContent,\n  generateContentStream,\n  getGoogleAIUrl,\n} from './client.js';\nimport {\n  ClientOptions,\n  Content as GeminiMessage,\n  GenerateContentRequest,\n  GenerateContentResponse,\n  GenerationConfig,\n  GoogleAIPluginOptions,\n  GoogleSearchRetrievalTool,\n  Model,\n  SafetySetting,\n  Tool,\n  ToolConfig,\n} from './types.js';\nimport {\n  calculateApiKey,\n  checkApiKey,\n  checkModelName,\n  cleanSchema,\n  extractVersion,\n} from './utils.js';\n\n/**\n * See https://ai.google.dev/gemini-api/docs/safety-settings#safety-filters.\n */\nconst SafetySettingsSchema = z.object({\n  category: z.enum([\n    'HARM_CATEGORY_UNSPECIFIED',\n    'HARM_CATEGORY_HATE_SPEECH',\n    'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n    'HARM_CATEGORY_HARASSMENT',\n    'HARM_CATEGORY_DANGEROUS_CONTENT',\n  ]),\n  threshold: z.enum([\n    'BLOCK_LOW_AND_ABOVE',\n    'BLOCK_MEDIUM_AND_ABOVE',\n    'BLOCK_ONLY_HIGH',\n    'BLOCK_NONE',\n  ]),\n});\n\nconst VoiceConfigSchema = z\n  .object({\n    prebuiltVoiceConfig: z\n      .object({\n        // TODO: Make this an array of objects so we can also specify the description\n        // for each voiceName.\n        voiceName: z\n          .union([\n            z.enum([\n              'Zephyr',\n              'Puck',\n              'Charon',\n              'Kore',\n              'Fenrir',\n              'Leda',\n              'Orus',\n              'Aoede',\n              'Callirrhoe',\n              'Autonoe',\n              'Enceladus',\n              'Iapetus',\n              'Umbriel',\n              'Algieba',\n              'Despina',\n              'Erinome',\n              'Algenib',\n              'Rasalgethi',\n              'Laomedeia',\n              'Achernar',\n              'Alnilam',\n              'Schedar',\n              'Gacrux',\n              'Pulcherrima',\n              'Achird',\n              'Zubenelgenubi',\n              'Vindemiatrix',\n              'Sadachbia',\n              'Sadaltager',\n              'Sulafat',\n            ]),\n            // To allow any new string values\n            z.string(),\n          ])\n          .describe('Name of the preset voice to use')\n          .optional(),\n      })\n      .describe('Configuration for the prebuilt speaker to use')\n      .passthrough()\n      .optional(),\n  })\n  .describe('Configuration for the voice to use')\n  .passthrough();\n\nexport const GeminiConfigSchema = GenerationCommonConfigSchema.extend({\n  apiKey: z\n    .string()\n    .describe('Overrides the plugin-configured API key, if specified.')\n    .optional(),\n  safetySettings: z\n    .array(SafetySettingsSchema)\n    .describe(\n      'Adjust how likely you are to see responses that could be harmful. ' +\n        'Content is blocked based on the probability that it is harmful.'\n    )\n    .optional(),\n  codeExecution: z\n    .union([z.boolean(), z.object({}).strict()])\n    .describe('Enables the model to generate and run code.')\n    .optional(),\n  contextCache: z\n    .boolean()\n    .describe(\n      'Context caching allows you to save and reuse precomputed input ' +\n        'tokens that you wish to use repeatedly.'\n    )\n    .optional(),\n  functionCallingConfig: z\n    .object({\n      mode: z.enum(['MODE_UNSPECIFIED', 'AUTO', 'ANY', 'NONE']).optional(),\n      allowedFunctionNames: z.array(z.string()).optional(),\n    })\n    .describe(\n      'Controls how the model uses the provided tools (function declarations). ' +\n        'With AUTO (Default) mode, the model decides whether to generate a ' +\n        'natural language response or suggest a function call based on the ' +\n        'prompt and context. With ANY, the model is constrained to always ' +\n        'predict a function call and guarantee function schema adherence. ' +\n        'With NONE, the model is prohibited from making function calls.'\n    )\n    .optional(),\n  responseModalities: z\n    .array(z.enum(['TEXT', 'IMAGE', 'AUDIO']))\n    .describe(\n      'The modalities to be used in response. Only supported for ' +\n        \"'gemini-2.0-flash-exp' model at present.\"\n    )\n    .optional(),\n  googleSearchRetrieval: z\n    .union([z.boolean(), z.object({}).passthrough()])\n    .describe(\n      'Retrieve public web data for grounding, powered by Google Search.'\n    )\n    .optional(),\n  temperature: z\n    .number()\n    .min(0)\n    .max(2)\n    .describe(\n      GenerationCommonConfigDescriptions.temperature +\n        ' The default value is 1.0.'\n    )\n    .optional(),\n  topP: z\n    .number()\n    .min(0)\n    .max(1)\n    .describe(\n      GenerationCommonConfigDescriptions.topP + ' The default value is 0.95.'\n    )\n    .optional(),\n  thinkingConfig: z\n    .object({\n      includeThoughts: z\n        .boolean()\n        .describe(\n          'Indicates whether to include thoughts in the response.' +\n            'If true, thoughts are returned only if the model supports ' +\n            'thought and thoughts are available.'\n        )\n        .optional(),\n      thinkingBudget: z\n        .number()\n        .min(0)\n        .max(24576)\n        .describe(\n          'Indicates the thinking budget in tokens. 0 is DISABLED. ' +\n            '-1 is AUTOMATIC. The default values and allowed ranges are model ' +\n            'dependent. The thinking budget parameter gives the model guidance ' +\n            'on the number of thinking tokens it can use when generating a ' +\n            'response. A greater number of tokens is typically associated with ' +\n            'more detailed thinking, which is needed for solving more complex ' +\n            'tasks. '\n        )\n        .optional(),\n    })\n    .optional(),\n}).passthrough();\nexport type GeminiConfigSchemaType = typeof GeminiConfigSchema;\nexport type GeminiConfig = z.infer<GeminiConfigSchemaType>;\n\nexport const GeminiTtsConfigSchema = GeminiConfigSchema.extend({\n  speechConfig: z\n    .object({\n      voiceConfig: VoiceConfigSchema.optional(),\n      multiSpeakerVoiceConfig: z\n        .object({\n          speakerVoiceConfigs: z\n            .array(\n              z\n                .object({\n                  speaker: z.string().describe('Name of the speaker to use'),\n                  voiceConfig: VoiceConfigSchema,\n                })\n                .describe(\n                  'Configuration for a single speaker in a multi speaker setup'\n                )\n                .passthrough()\n            )\n            .describe('Configuration for all the enabled speaker voices'),\n        })\n        .describe('Configuration for multi-speaker setup')\n        .passthrough()\n        .optional(),\n    })\n    .describe('Speech generation config')\n    .passthrough()\n    .optional(),\n}).passthrough();\nexport type GeminiTtsConfigSchemaType = typeof GeminiTtsConfigSchema;\nexport type GeminiTtsConfig = z.infer<GeminiTtsConfigSchemaType>;\n\nexport const GemmaConfigSchema = GeminiConfigSchema.extend({\n  temperature: z\n    .number()\n    .min(0.0)\n    .max(1.0)\n    .describe(\n      GenerationCommonConfigDescriptions.temperature +\n        ' The default value is 1.0.'\n    )\n    .optional(),\n}).passthrough();\nexport type GemmaConfigSchemaType = typeof GemmaConfigSchema;\nexport type GemmaConfig = z.infer<GemmaConfigSchemaType>;\n\n// This contains all the Gemini config schema types\ntype ConfigSchemaType =\n  | GeminiConfigSchemaType\n  | GeminiTtsConfigSchemaType\n  | GemmaConfigSchemaType;\n\nfunction commonRef(\n  name: string,\n  info?: ModelInfo,\n  configSchema: ConfigSchemaType = GeminiConfigSchema\n): ModelReference<ConfigSchemaType> {\n  return modelRef({\n    name: `googleai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        multiturn: true,\n        media: true,\n        tools: true,\n        toolChoice: true,\n        systemRole: true,\n        constrained: 'no-tools',\n        output: ['text', 'json'],\n      },\n    },\n  });\n}\n\nconst GENERIC_MODEL = commonRef('gemini');\nconst GENERIC_TTS_MODEL = commonRef(\n  'gemini-tts',\n  {\n    supports: {\n      multiturn: false,\n      media: false,\n      tools: false,\n      toolChoice: false,\n      systemRole: false,\n      constrained: 'no-tools',\n    },\n  },\n  GeminiTtsConfigSchema\n);\nconst GENERIC_GEMMA_MODEL = commonRef(\n  'gemma-generic',\n  undefined,\n  GemmaConfigSchema\n);\n\nconst KNOWN_GEMINI_MODELS = {\n  'gemini-2.5-pro': commonRef('gemini-2.5-pro'),\n  'gemini-2.5-flash': commonRef('gemini-2.5-flash'),\n  'gemini-2.5-flash-lite': commonRef('gemini-2.5-flash-lite'),\n  'gemini-2.5-flash-image-preview': commonRef('gemini-2.5-flash-image-preview'),\n  'gemini-2.0-flash': commonRef('gemini-2.0-flash'),\n  'gemini-2.0-flash-preview-image-generation': commonRef(\n    'gemini-2.0-flash-preview-image-generation'\n  ),\n  'gemini-2.0-flash-lite': commonRef('gemini-2.0-flash-lite'),\n};\nexport type KnownGeminiModels = keyof typeof KNOWN_GEMINI_MODELS;\nexport type GeminiModelName = `gemini-${string}`;\nexport function isGeminiModelName(value: string): value is GeminiModelName {\n  return value.startsWith('gemini-') && !value.endsWith('-tts');\n}\n\nconst KNOWN_TTS_MODELS = {\n  'gemini-2.5-flash-preview-tts': commonRef(\n    'gemini-2.5-flash-preview-tts',\n    { ...GENERIC_TTS_MODEL.info },\n    GeminiTtsConfigSchema\n  ),\n  'gemini-2.5-pro-preview-tts': commonRef(\n    'gemini-2.5-pro-preview-tts',\n    { ...GENERIC_TTS_MODEL.info },\n    GeminiTtsConfigSchema\n  ),\n};\nexport type KnownTtsModels = keyof typeof KNOWN_TTS_MODELS;\nexport type TTSModelName = `gemini-${string}-tts`;\nexport function isTTSModelName(value: string): value is TTSModelName {\n  return value.startsWith('gemini-') && value.endsWith('-tts');\n}\n\nconst KNOWN_GEMMA_MODELS = {\n  'gemma-3-12b-it': commonRef('gemma-3-12b-it', undefined, GemmaConfigSchema),\n  'gemma-3-1b-it': commonRef('gemma-3-1b-it', undefined, GemmaConfigSchema),\n  'gemma-3-27b-it': commonRef('gemma-3-27b-it', undefined, GemmaConfigSchema),\n  'gemma-3-4b-it': commonRef('gemma-3-4b-it', undefined, GemmaConfigSchema),\n  'gemma-3n-e4b-it': commonRef('gemma-3n-e4b-it', undefined, GemmaConfigSchema),\n} as const;\nexport type KnownGemmaModels = keyof typeof KNOWN_GEMMA_MODELS;\nexport type GemmaModelName = `gemma-${string}`;\nexport function isGemmaModelName(value: string): value is GemmaModelName {\n  return value.startsWith('gemma-');\n}\n\nconst KNOWN_MODELS = {\n  ...KNOWN_GEMINI_MODELS,\n  ...KNOWN_TTS_MODELS,\n  ...KNOWN_GEMMA_MODELS,\n};\n\nexport function model(\n  version: string,\n  config: GeminiConfig | GeminiTtsConfig | GemmaConfig = {}\n): ModelReference<ConfigSchemaType> {\n  const name = checkModelName(version);\n\n  if (isTTSModelName(name)) {\n    return modelRef({\n      name: `googleai/${name}`,\n      config,\n      configSchema: GeminiTtsConfigSchema,\n      info: { ...GENERIC_TTS_MODEL.info },\n    });\n  }\n\n  if (isGemmaModelName(name)) {\n    return modelRef({\n      name: `googleai/${name}`,\n      config,\n      configSchema: GemmaConfigSchema,\n      info: { ...GENERIC_GEMMA_MODEL.info },\n    });\n  }\n\n  return modelRef({\n    name: `googleai/${name}`,\n    config,\n    configSchema: GeminiConfigSchema,\n    info: { ...GENERIC_MODEL.info },\n  });\n}\n\n// Takes a full list of models, filters for current Gemini models only\n// and returns a modelActionMetadata for each.\nexport function listActions(models: Model[]): ActionMetadata[] {\n  return (\n    models\n      .filter((m) => m.supportedGenerationMethods.includes('generateContent'))\n      // Filter out deprecated\n      .filter((m) => !m.description || !m.description.includes('deprecated'))\n      .map((m) => {\n        const ref = model(m.name);\n        return modelActionMetadata({\n          name: ref.name,\n          info: ref.info,\n          configSchema: ref.configSchema,\n        });\n      })\n  );\n}\n\nexport function defineKnownModels(ai: Genkit, options?: GoogleAIPluginOptions) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, options);\n  }\n}\n\n/**\n * Defines a new GoogleAI Gemini model.\n */\nexport function defineModel(\n  ai: Genkit,\n  name: string,\n  pluginOptions?: GoogleAIPluginOptions\n): ModelAction {\n  checkApiKey(pluginOptions?.apiKey);\n  const ref = model(name);\n  const clientOptions: ClientOptions = {\n    apiVersion: pluginOptions?.apiVersion,\n    baseUrl: pluginOptions?.baseUrl,\n  };\n\n  const middleware: ModelMiddleware[] = [];\n  if (ref.info?.supports?.media) {\n    // the gemini api doesn't support downloading media from http(s)\n    middleware.push(\n      downloadRequestMedia({\n        maxBytes: 1024 * 1024 * 10,\n        // don't downlaod files that have been uploaded using the Files API\n        filter: (part) => {\n          try {\n            const url = new URL(part.media.url);\n            if (\n              // Gemini can handle these URLs\n              [\n                'generativelanguage.googleapis.com',\n                'www.youtube.com',\n                'youtube.com',\n                'youtu.be',\n              ].includes(url.hostname)\n            )\n              return false;\n          } catch {}\n          return true;\n        },\n      })\n    );\n  }\n\n  return ai.defineModel(\n    {\n      apiVersion: 'v2',\n      name: ref.name,\n      ...ref.info,\n      configSchema: ref.configSchema,\n      use: middleware,\n    },\n    async (request, { streamingRequested, sendChunk, abortSignal }) => {\n      const clientOpt = { ...clientOptions, signal: abortSignal };\n\n      // Make a copy so that modifying the request will not produce side-effects\n      const messages = [...request.messages];\n      if (messages.length === 0) throw new Error('No messages provided.');\n\n      // Gemini does not support messages with role system and instead expects\n      // systemInstructions to be provided as a separate input. The first\n      // message detected with role=system will be used for systemInstructions.\n      let systemInstruction: GeminiMessage | undefined = undefined;\n      const systemMessage = messages.find((m) => m.role === 'system');\n      if (systemMessage) {\n        messages.splice(messages.indexOf(systemMessage), 1);\n        systemInstruction = toGeminiSystemInstruction(systemMessage);\n      }\n\n      const tools: Tool[] = [];\n      if (request.tools?.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(toGeminiTool),\n        });\n      }\n\n      const requestOptions: z.infer<ConfigSchemaType> = {\n        ...request.config,\n      };\n      const {\n        apiKey: apiKeyFromConfig,\n        safetySettings: safetySettingsFromConfig,\n        codeExecution: codeExecutionFromConfig,\n        version: versionFromConfig,\n        functionCallingConfig,\n        googleSearchRetrieval,\n        tools: toolsFromConfig,\n        ...restOfConfigOptions\n      } = requestOptions;\n\n      if (codeExecutionFromConfig) {\n        tools.push({\n          codeExecution:\n            codeExecutionFromConfig === true ? {} : codeExecutionFromConfig,\n        });\n      }\n\n      if (toolsFromConfig) {\n        tools.push(...(toolsFromConfig as any[]));\n      }\n\n      if (googleSearchRetrieval) {\n        tools.push({\n          googleSearch:\n            googleSearchRetrieval === true ? {} : googleSearchRetrieval,\n        } as GoogleSearchRetrievalTool);\n      }\n\n      let toolConfig: ToolConfig | undefined;\n      if (functionCallingConfig) {\n        toolConfig = {\n          functionCallingConfig: {\n            allowedFunctionNames: functionCallingConfig.allowedFunctionNames,\n            mode: toGeminiFunctionModeEnum(functionCallingConfig.mode),\n          },\n        };\n      } else if (request.toolChoice) {\n        toolConfig = {\n          functionCallingConfig: {\n            mode: toGeminiFunctionModeEnum(request.toolChoice),\n          },\n        };\n      }\n\n      // Cannot use tools with JSON mode\n      const jsonMode =\n        request.output?.format === 'json' ||\n        (request.output?.contentType === 'application/json' &&\n          tools.length === 0);\n\n      const generationConfig: GenerationConfig = {\n        ...restOfConfigOptions,\n        candidateCount: request.candidates || undefined,\n        responseMimeType: jsonMode ? 'application/json' : undefined,\n      };\n\n      if (request.output?.constrained && jsonMode) {\n        generationConfig.responseSchema = cleanSchema(request.output.schema);\n      }\n\n      const msg = toGeminiMessage(messages[messages.length - 1], ref);\n\n      let generateContentRequest: GenerateContentRequest = {\n        systemInstruction,\n        generationConfig,\n        tools: tools.length ? tools : undefined,\n        toolConfig,\n        safetySettings: safetySettingsFromConfig?.filter(\n          (setting) => setting.category !== 'HARM_CATEGORY_UNSPECIFIED'\n        ) as SafetySetting[],\n        contents: messages.map((message) => toGeminiMessage(message, ref)),\n      };\n\n      const modelVersion = versionFromConfig || extractVersion(ref);\n\n      const generateApiKey = calculateApiKey(\n        pluginOptions?.apiKey,\n        requestOptions.apiKey\n      );\n\n      const callGemini = async () => {\n        let response: GenerateContentResponse;\n\n        if (streamingRequested) {\n          const result = await generateContentStream(\n            generateApiKey,\n            modelVersion,\n            generateContentRequest,\n            clientOpt\n          );\n\n          for await (const item of result.stream) {\n            item.candidates?.forEach((candidate) => {\n              const c = fromGeminiCandidate(candidate);\n              sendChunk({\n                index: c.index,\n                content: c.message.content,\n              });\n            });\n          }\n          response = await result.response;\n        } else {\n          response = await generateContent(\n            generateApiKey,\n            modelVersion,\n            generateContentRequest,\n            clientOpt\n          );\n        }\n\n        const candidates = response.candidates || [];\n        if (response.candidates?.['undefined']) {\n          candidates.push(response.candidates['undefined']);\n        }\n        if (!candidates.length) {\n          throw new GenkitError({\n            status: 'FAILED_PRECONDITION',\n            message: 'No valid candidates returned.',\n          });\n        }\n\n        const candidateData = candidates.map(fromGeminiCandidate) || [];\n\n        return {\n          candidates: candidateData,\n          custom: response,\n          usage: {\n            ...getBasicUsageStats(request.messages, candidateData),\n            inputTokens: response.usageMetadata?.promptTokenCount,\n            outputTokens: response.usageMetadata?.candidatesTokenCount,\n            thoughtsTokens: response.usageMetadata?.thoughtsTokenCount,\n            totalTokens: response.usageMetadata?.totalTokenCount,\n            cachedContentTokens:\n              response.usageMetadata?.cachedContentTokenCount,\n          },\n        };\n      };\n\n      // If debugTraces is enabled, we wrap the actual model call with a span, add raw\n      // API params as for input.\n      return pluginOptions?.experimental_debugTraces\n        ? await runInNewSpan(\n            ai.registry,\n            {\n              metadata: {\n                name: streamingRequested ? 'sendMessageStream' : 'sendMessage',\n              },\n            },\n            async (metadata) => {\n              metadata.input = {\n                apiEndpoint: getGoogleAIUrl({\n                  resourcePath: '',\n                  clientOptions: clientOpt,\n                }),\n                cache: {},\n                model: modelVersion,\n                generateContentOptions: generateContentRequest,\n                parts: msg.parts,\n                options: clientOpt,\n              };\n              const response = await callGemini();\n              metadata.output = response.custom;\n              return response;\n            }\n          )\n        : await callGemini();\n    }\n  );\n}\n\nexport const TEST_ONLY = { KNOWN_MODELS };\n"],"mappings":"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","names":[]}