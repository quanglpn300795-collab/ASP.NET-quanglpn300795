{"version":3,"sources":["../../src/googleai/client.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  extractErrMsg,\n  getGenkitClientHeader,\n  processStream,\n} from '../common/utils.js';\nimport {\n  ClientOptions,\n  EmbedContentRequest,\n  EmbedContentResponse,\n  GenerateContentRequest,\n  GenerateContentResponse,\n  GenerateContentStreamResult,\n  ImagenPredictRequest,\n  ImagenPredictResponse,\n  ListModelsResponse,\n  Model,\n  VeoOperation,\n  VeoPredictRequest,\n} from './types.js';\n\n/**\n * Lists available models.\n *\n * https://ai.google.dev/api/models#method:-models.list\n *\n * @param apiKey The API key to authenticate the request.\n * @param clientOptions Optional options to customize the request\n * @returns A promise that resolves to an array of Model objects.\n */\nexport async function listModels(\n  apiKey: string,\n  clientOptions?: ClientOptions\n): Promise<Model[]> {\n  const url = getGoogleAIUrl({\n    resourcePath: 'models',\n    queryParams: 'pageSize=1000',\n    clientOptions,\n  });\n  const fetchOptions = getFetchOptions({\n    method: 'GET',\n    apiKey,\n    clientOptions,\n  });\n  const response = await makeRequest(url, fetchOptions);\n  const modelResponse = JSON.parse(await response.text()) as ListModelsResponse;\n  return modelResponse.models;\n}\n\n/**\n * Generates content using the Google AI API.\n *\n * @param {string} apiKey The API key for authentication.\n * @param {string} model The name of the model to use for content generation.\n * @param {GenerateContentRequest} generateContentRequest The request object containing the content generation parameters.\n * @param {ClientOptions} [clientOptions] Optional client options.\n * @returns {Promise<GenerateContentResponse>} A promise that resolves to the content generation response.\n * @throws {Error} If the API request fails or the response cannot be parsed.\n */\nexport async function generateContent(\n  apiKey: string,\n  model: string,\n  generateContentRequest: GenerateContentRequest,\n  clientOptions?: ClientOptions\n): Promise<GenerateContentResponse> {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: 'generateContent',\n    clientOptions,\n  });\n  const fetchOptions = getFetchOptions({\n    method: 'POST',\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(generateContentRequest),\n  });\n  const response = await makeRequest(url, fetchOptions);\n\n  const responseJson = (await response.json()) as GenerateContentResponse;\n  return responseJson;\n}\n\n/**\n * Generates a stream of content using the Google AI API.\n *\n * @param {string} apiKey The API key for authentication.\n * @param {string} model The name of the model to use for content generation.\n * @param {GenerateContentRequest} generateContentRequest The request object containing the content generation parameters.\n * @param {ClientOptions} [clientOptions] Optional client options.\n * @returns {Promise<GenerateContentStreamResult>} A promise that resolves to an object containing a both the stream and aggregated response.\n * @throws {Error} If the API request fails.\n */\nexport async function generateContentStream(\n  apiKey: string,\n  model: string,\n  generateContentRequest: GenerateContentRequest,\n  clientOptions?: ClientOptions\n): Promise<GenerateContentStreamResult> {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: 'streamGenerateContent',\n    clientOptions,\n  });\n  const fetchOptions = getFetchOptions({\n    method: 'POST',\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(generateContentRequest),\n  });\n\n  const response = await makeRequest(url, fetchOptions);\n  return processStream(response);\n}\n\n/**\n * Embeds content using the Google AI API.\n *\n * @param {string} apiKey The API key for authentication.\n * @param {string} model The name of the model to use for content embedding.\n * @param {EmbedContentRequest} embedContentRequest The request object containing the content to embed.\n * @param {ClientOptions} [clientOptions] Optional client options.\n * @returns {Promise<EmbedContentResponse>} A promise that resolves to the embedding response.\n * @throws {Error} If the API request fails or the response cannot be parsed.\n */\nexport async function embedContent(\n  apiKey: string,\n  model: string,\n  embedContentRequest: EmbedContentRequest,\n  clientOptions?: ClientOptions\n): Promise<EmbedContentResponse> {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: 'embedContent',\n    clientOptions,\n  });\n  const fetchOptions = getFetchOptions({\n    method: 'POST',\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(embedContentRequest),\n  });\n\n  const response = await makeRequest(url, fetchOptions);\n  return response.json();\n}\n\nexport async function imagenPredict(\n  apiKey: string,\n  model: string,\n  imagenPredictRequest: ImagenPredictRequest,\n  clientOptions?: ClientOptions\n): Promise<ImagenPredictResponse> {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: 'predict',\n    clientOptions,\n  });\n\n  const fetchOptions = getFetchOptions({\n    method: 'POST',\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(imagenPredictRequest),\n  });\n\n  const response = await makeRequest(url, fetchOptions);\n  return response.json() as Promise<ImagenPredictResponse>;\n}\n\nexport async function veoPredict(\n  apiKey: string,\n  model: string,\n  veoPredictRequest: VeoPredictRequest,\n  clientOptions?: ClientOptions\n): Promise<VeoOperation> {\n  const url = getGoogleAIUrl({\n    resourcePath: `models/${model}`,\n    resourceMethod: 'predictLongRunning',\n    clientOptions,\n  });\n\n  const fetchOptions = getFetchOptions({\n    method: 'POST',\n    apiKey,\n    clientOptions,\n    body: JSON.stringify(veoPredictRequest),\n  });\n\n  const response = await makeRequest(url, fetchOptions);\n  return response.json() as Promise<VeoOperation>;\n}\n\nexport async function veoCheckOperation(\n  apiKey: string,\n  operation: string,\n  clientOptions?: ClientOptions\n): Promise<VeoOperation> {\n  const url = getGoogleAIUrl({\n    resourcePath: operation,\n    clientOptions,\n  });\n  const fetchOptions = getFetchOptions({\n    method: 'GET',\n    apiKey,\n    clientOptions,\n  });\n\n  const response = await makeRequest(url, fetchOptions);\n  return response.json() as Promise<VeoOperation>;\n}\n\n/**\n * Generates a Google AI URL.\n *\n * @param params - An object containing the parameters for the URL.\n * @param params.path - The path for the URL (the part after the version)\n * @param params.task - An optional task\n * @param params.queryParams - An optional string of '&' delimited query parameters.\n * @param params.clientOptions - An optional object containing client options.\n * @returns The generated Google AI URL.\n */\nexport function getGoogleAIUrl(params: {\n  resourcePath: string;\n  resourceMethod?: string;\n  queryParams?: string;\n  clientOptions?: ClientOptions;\n}): string {\n  // v1beta is the default because all the new experimental models\n  // are found here but not in v1.\n  const DEFAULT_API_VERSION = 'v1beta';\n  const DEFAULT_BASE_URL = 'https://generativelanguage.googleapis.com';\n\n  const apiVersion = params.clientOptions?.apiVersion || DEFAULT_API_VERSION;\n  const baseUrl = params.clientOptions?.baseUrl || DEFAULT_BASE_URL;\n\n  let url = `${baseUrl}/${apiVersion}/${params.resourcePath}`;\n  if (params.resourceMethod) {\n    url += `:${params.resourceMethod}`;\n  }\n  if (params.queryParams) {\n    url += `?${params.queryParams}`;\n  }\n  if (params.resourceMethod === 'streamGenerateContent') {\n    url += `${params.queryParams ? '&' : '?'}alt=sse`;\n  }\n  return url;\n}\n\nfunction getFetchOptions(params: {\n  method: 'POST' | 'GET';\n  apiKey: string;\n  body?: string;\n  clientOptions?: ClientOptions;\n}) {\n  const fetchOptions: RequestInit = {\n    method: params.method,\n    headers: getHeaders(params.apiKey, params.clientOptions),\n  };\n  if (params.body) {\n    fetchOptions.body = params.body;\n  }\n  const signal = getAbortSignal(params.clientOptions);\n  if (signal) {\n    fetchOptions.signal = signal;\n  }\n  return fetchOptions;\n}\n\nfunction getAbortSignal(\n  clientOptions?: ClientOptions\n): AbortSignal | undefined {\n  const hasTimeout = (clientOptions?.timeout ?? -1) >= 0;\n  if (clientOptions?.signal !== undefined || hasTimeout) {\n    const controller = new AbortController();\n    if (hasTimeout) {\n      setTimeout(() => controller.abort(), clientOptions?.timeout);\n    }\n    if (clientOptions?.signal) {\n      clientOptions.signal.addEventListener('abort', () => {\n        controller.abort();\n      });\n    }\n    return controller.signal;\n  }\n  return undefined;\n}\n\n/**\n * Constructs the headers for an API request.\n *\n * @param {string} apiKey The API key for authentication.\n * @param {ClientOptions} [clientOptions] Optional client options, containing custom headers.\n * @returns {HeadersInit} An object containing the headers to be included in the request.\n */\nfunction getHeaders(\n  apiKey: string,\n  clientOptions?: ClientOptions\n): HeadersInit {\n  let customHeaders = {};\n  if (clientOptions?.customHeaders) {\n    customHeaders = structuredClone(clientOptions.customHeaders);\n    delete customHeaders['x-goog-api-key']; // Not allowed in user settings\n    delete customHeaders['x-goog-api-client']; // Not allowed in user settings\n  }\n  const headers: HeadersInit = {\n    ...customHeaders,\n    'Content-Type': 'application/json',\n    'x-goog-api-key': apiKey,\n    'x-goog-api-client': getGenkitClientHeader(),\n  };\n\n  return headers;\n}\n\n/**\n * Makes a request to the specified URL with the provided options.\n *\n * @param {string} url The URL to make the request to.\n * @param {RequestInit} fetchOptions The options to pass to the `fetch` API.\n * @returns {Promise<Response>} A promise that resolves to the Response\n * @throws {Error} If the request fails\n */\nasync function makeRequest(\n  url: string,\n  fetchOptions: RequestInit\n): Promise<Response> {\n  try {\n    const response = await fetch(url, fetchOptions);\n    if (!response.ok) {\n      let errorText = await response.text();\n      let errorMessage = errorText;\n      try {\n        const json = JSON.parse(errorText);\n        if (json.error && json.error.message) {\n          errorMessage = json.error.message;\n        }\n      } catch (e) {\n        // Not JSON or expected format, use the raw text\n      }\n      throw new Error(\n        `Error fetching from ${url}: [${response.status} ${response.statusText}] ${errorMessage}`\n      );\n    }\n    return response;\n  } catch (e: unknown) {\n    console.error(e);\n    throw new Error(`Failed to fetch from ${url}: ${extractErrMsg(e)}`);\n  }\n}\n\nexport const TEST_ONLY = {\n  getFetchOptions,\n  getAbortSignal,\n  getHeaders,\n  makeRequest,\n};\n"],"mappings":"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","names":[]}