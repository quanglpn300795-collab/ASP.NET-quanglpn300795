{"version":3,"sources":["../../src/googleai/embedder.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionMetadata,\n  EmbedderAction,\n  embedderActionMetadata,\n  EmbedderInfo,\n  EmbedderReference,\n  Genkit,\n  z,\n} from 'genkit';\nimport { embedderRef } from 'genkit/embedder';\nimport { embedContent } from './client.js';\nimport {\n  EmbedContentRequest,\n  GoogleAIPluginOptions,\n  Model,\n  TaskTypeSchema,\n} from './types.js';\nimport {\n  calculateApiKey,\n  checkApiKey,\n  checkModelName,\n  extractVersion,\n} from './utils.js';\n\nexport const EmbeddingConfigSchema = z\n  .object({\n    /** Override the API key provided at plugin initialization. */\n    apiKey: z.string().optional(),\n    /**\n     * The `task_type` parameter is defined as the intended downstream application to help the model\n     * produce better quality embeddings.\n     **/\n    taskType: TaskTypeSchema.optional(),\n    title: z.string().optional(),\n    version: z.string().optional(),\n    /**\n     * The `outputDimensionality` parameter allows you to specify the dimensionality of the embedding output.\n     * By default, the model generates embeddings with 768 dimensions. Models such as\n     * `text-embedding-004`, `text-embedding-005`, and `text-multilingual-embedding-002`\n     * allow the output dimensionality to be adjusted between 1 and 768.\n     * By selecting a smaller output dimensionality, users can save memory and storage space, leading to more efficient computations.\n     **/\n    outputDimensionality: z.number().min(1).optional(),\n  })\n  .passthrough();\nexport type EmbeddingConfigSchemaType = typeof EmbeddingConfigSchema;\nexport type EmbeddingConfig = z.infer<EmbeddingConfigSchemaType>;\n\n// This contains all the embedder config schema types\ntype ConfigSchemaType = EmbeddingConfigSchemaType;\n\nfunction commonRef(\n  name: string,\n  info?: EmbedderInfo,\n  configSchema: ConfigSchemaType = EmbeddingConfigSchema\n): EmbedderReference<ConfigSchemaType> {\n  return embedderRef({\n    name: `googleai/${name}`,\n    configSchema,\n    info: info ?? {\n      dimensions: 768,\n      supports: {\n        input: ['text'],\n      },\n    },\n  });\n}\n\nconst GENERIC_MODEL = commonRef('embedder');\n\nconst KNOWN_MODELS = {\n  'text-embedding-004': commonRef('text-embedding-004'),\n  'gemini-embedding-001': commonRef('gemini-embedding-001'),\n};\nexport type KnownModels = keyof typeof KNOWN_MODELS; // For autocomplete\n\nexport function model(\n  version: string,\n  config: EmbeddingConfig = {}\n): EmbedderReference<ConfigSchemaType> {\n  const name = checkModelName(version);\n  return embedderRef({\n    name: `googleai/${name}`,\n    config,\n    configSchema: GENERIC_MODEL.configSchema,\n    info: {\n      ...GENERIC_MODEL.info,\n    },\n  });\n}\n\nexport function listActions(models: Model[]): ActionMetadata[] {\n  return (\n    models\n      .filter((m) => m.supportedGenerationMethods.includes('embedContent'))\n      // Filter out deprecated\n      .filter((m) => !m.description || !m.description.includes('deprecated'))\n      .map((m) => {\n        const ref = model(m.name);\n        return embedderActionMetadata({\n          name: ref.name,\n          info: ref.info,\n          configSchema: ref.configSchema,\n        });\n      })\n  );\n}\n\nexport function defineKnownModels(ai: Genkit, options?: GoogleAIPluginOptions) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineEmbedder(ai, name, options);\n  }\n}\n\nexport function defineEmbedder(\n  ai: Genkit,\n  name: string,\n  pluginOptions?: GoogleAIPluginOptions\n): EmbedderAction {\n  checkApiKey(pluginOptions?.apiKey);\n  const ref = model(name);\n\n  return ai.defineEmbedder(\n    {\n      name: ref.name,\n      configSchema: ref.configSchema,\n      info: ref.info,\n    },\n    async (input, reqOptions) => {\n      const embedApiKey = calculateApiKey(\n        pluginOptions?.apiKey,\n        reqOptions?.apiKey\n      );\n      const embedVersion = reqOptions?.version || extractVersion(ref);\n\n      const embeddings = await Promise.all(\n        input.map(async (doc) => {\n          const response = await embedContent(embedApiKey, embedVersion, {\n            taskType: reqOptions?.taskType,\n            title: reqOptions?.title,\n            content: {\n              role: '',\n              parts: [{ text: doc.text }],\n            },\n            outputDimensionality: reqOptions?.outputDimensionality,\n          } as EmbedContentRequest);\n          const values = response.embedding.values;\n          return { embedding: values };\n        })\n      );\n      return { embeddings };\n    }\n  );\n}\n\nexport const TEST_ONLY = { KNOWN_MODELS };\n"],"mappings":"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","names":[]}