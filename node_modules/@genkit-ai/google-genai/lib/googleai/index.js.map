{"version":3,"sources":["../../src/googleai/index.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionMetadata,\n  EmbedderReference,\n  Genkit,\n  ModelReference,\n  z,\n} from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { GenkitPlugin, genkitPlugin } from 'genkit/plugin';\nimport { ActionType } from 'genkit/registry';\nimport { extractErrMsg } from '../common/utils.js';\nimport { listModels } from './client.js';\nimport { GoogleAIPluginOptions } from './types.js';\nimport { calculateApiKey } from './utils.js';\n\n// These are namespaced because they all intentionally have\n// functions of the same name with the same arguments.\n// (All exports from these files are used here)\nimport * as embedder from './embedder.js';\nimport * as gemini from './gemini.js';\nimport * as imagen from './imagen.js';\nimport * as veo from './veo.js';\n\nexport { type EmbeddingConfig } from './embedder.js';\nexport { type GeminiConfig, type GeminiTtsConfig } from './gemini.js';\nexport { type ImagenConfig } from './imagen.js';\nexport { type GoogleAIPluginOptions };\n\nasync function initializer(ai: Genkit, options?: GoogleAIPluginOptions) {\n  imagen.defineKnownModels(ai, options);\n  gemini.defineKnownModels(ai, options);\n  embedder.defineKnownModels(ai, options);\n  veo.defineKnownModels(ai, options);\n}\n\nasync function resolver(\n  ai: Genkit,\n  actionType: ActionType,\n  actionName: string,\n  options: GoogleAIPluginOptions\n) {\n  switch (actionType) {\n    case 'model':\n      if (veo.isVeoModelName(actionName)) {\n        // no-op (not gemini)\n      } else if (imagen.isImagenModelName(actionName)) {\n        imagen.defineModel(ai, actionName, options);\n      } else {\n        // gemini, tts, gemma, unknown models\n        gemini.defineModel(ai, actionName, options);\n      }\n      break;\n    case 'background-model':\n      if (veo.isVeoModelName(actionName)) {\n        veo.defineModel(ai, actionName, options);\n      }\n      break;\n    case 'embedder':\n      embedder.defineEmbedder(ai, actionName, options);\n      break;\n    default:\n    // no-op\n  }\n}\n\nasync function listActions(\n  options?: GoogleAIPluginOptions\n): Promise<ActionMetadata[]> {\n  try {\n    const apiKey = calculateApiKey(options?.apiKey, undefined);\n    const allModels = await listModels(apiKey, {\n      baseUrl: options?.baseUrl,\n      apiVersion: options?.apiVersion,\n    });\n\n    return [\n      ...gemini.listActions(allModels),\n      ...imagen.listActions(allModels),\n      ...veo.listActions(allModels),\n      ...embedder.listActions(allModels),\n    ];\n  } catch (e: unknown) {\n    logger.error(extractErrMsg(e));\n    return [];\n  }\n}\n\n/**\n * Google Gemini Developer API plugin.\n */\nexport function googleAIPlugin(options?: GoogleAIPluginOptions): GenkitPlugin {\n  let listActionsCache;\n  return genkitPlugin(\n    'googleai',\n    async (ai: Genkit) => await initializer(ai, options),\n    async (ai: Genkit, actionType: ActionType, actionName: string) =>\n      await resolver(ai, actionType, actionName, options || {}),\n    async () => {\n      if (listActionsCache) return listActionsCache;\n      listActionsCache = await listActions(options);\n      return listActionsCache;\n    }\n  );\n}\n\nexport type GoogleAIPlugin = {\n  (pluginOptions?: GoogleAIPluginOptions): GenkitPlugin;\n  model(\n    name: gemini.KnownGemmaModels | (gemini.GemmaModelName & {}),\n    config: gemini.GemmaConfig\n  ): ModelReference<gemini.GemmaConfigSchemaType>;\n  model(\n    name: gemini.KnownTtsModels | (gemini.TTSModelName & {}),\n    config: gemini.GeminiTtsConfig\n  ): ModelReference<gemini.GeminiTtsConfigSchemaType>;\n  model(\n    name: gemini.KnownGeminiModels | (gemini.GeminiModelName & {}),\n    config?: gemini.GeminiConfig\n  ): ModelReference<gemini.GeminiConfigSchemaType>;\n  model(\n    name: imagen.KnownModels | (imagen.ImagenModelName & {}),\n    config?: imagen.ImagenConfig\n  ): ModelReference<imagen.ImagenConfigSchemaType>;\n  model(\n    name: veo.KnownModels | (veo.VeoModelName & {}),\n    config?: veo.VeoConfig\n  ): ModelReference<veo.VeoConfigSchemaType>;\n  model(name: string, config?: any): ModelReference<z.ZodTypeAny>;\n\n  embedder(\n    name: string,\n    config?: embedder.EmbeddingConfig\n  ): EmbedderReference<embedder.EmbeddingConfigSchemaType>;\n};\n\n/**\n * Google Gemini Developer API plugin.\n */\nexport const googleAI = googleAIPlugin as GoogleAIPlugin;\n(googleAI as any).model = (\n  name: string,\n  config?: any\n): ModelReference<z.ZodTypeAny> => {\n  if (veo.isVeoModelName(name)) {\n    return veo.model(name, config);\n  }\n  if (imagen.isImagenModelName(name)) {\n    return imagen.model(name, config);\n  }\n  // gemma, tts, gemini and unknown model families.\n  return gemini.model(name, config);\n};\ngoogleAI.embedder = (\n  name: string,\n  config?: embedder.EmbeddingConfig\n): EmbedderReference<embedder.EmbeddingConfigSchemaType> => {\n  return embedder.model(name, config);\n};\n\nexport default googleAI;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA,qBAAuB;AACvB,oBAA2C;AAE3C,mBAA8B;AAC9B,oBAA2B;AAE3B,IAAAA,gBAAgC;AAKhC,eAA0B;AAC1B,aAAwB;AACxB,aAAwB;AACxB,UAAqB;AAOrB,eAAe,YAAY,IAAY,SAAiC;AACtE,SAAO,kBAAkB,IAAI,OAAO;AACpC,SAAO,kBAAkB,IAAI,OAAO;AACpC,WAAS,kBAAkB,IAAI,OAAO;AACtC,MAAI,kBAAkB,IAAI,OAAO;AACnC;AAEA,eAAe,SACb,IACA,YACA,YACA,SACA;AACA,UAAQ,YAAY;AAAA,IAClB,KAAK;AACH,UAAI,IAAI,eAAe,UAAU,GAAG;AAAA,MAEpC,WAAW,OAAO,kBAAkB,UAAU,GAAG;AAC/C,eAAO,YAAY,IAAI,YAAY,OAAO;AAAA,MAC5C,OAAO;AAEL,eAAO,YAAY,IAAI,YAAY,OAAO;AAAA,MAC5C;AACA;AAAA,IACF,KAAK;AACH,UAAI,IAAI,eAAe,UAAU,GAAG;AAClC,YAAI,YAAY,IAAI,YAAY,OAAO;AAAA,MACzC;AACA;AAAA,IACF,KAAK;AACH,eAAS,eAAe,IAAI,YAAY,OAAO;AAC/C;AAAA,IACF;AAAA,EAEF;AACF;AAEA,eAAe,YACb,SAC2B;AAC3B,MAAI;AACF,UAAM,aAAS,+BAAgB,SAAS,QAAQ,MAAS;AACzD,UAAM,YAAY,UAAM,0BAAW,QAAQ;AAAA,MACzC,SAAS,SAAS;AAAA,MAClB,YAAY,SAAS;AAAA,IACvB,CAAC;AAED,WAAO;AAAA,MACL,GAAG,OAAO,YAAY,SAAS;AAAA,MAC/B,GAAG,OAAO,YAAY,SAAS;AAAA,MAC/B,GAAG,IAAI,YAAY,SAAS;AAAA,MAC5B,GAAG,SAAS,YAAY,SAAS;AAAA,IACnC;AAAA,EACF,SAAS,GAAY;AACnB,0BAAO,UAAM,4BAAc,CAAC,CAAC;AAC7B,WAAO,CAAC;AAAA,EACV;AACF;AAKO,SAAS,eAAe,SAA+C;AAC5E,MAAI;AACJ,aAAO;AAAA,IACL;AAAA,IACA,OAAO,OAAe,MAAM,YAAY,IAAI,OAAO;AAAA,IACnD,OAAO,IAAY,YAAwB,eACzC,MAAM,SAAS,IAAI,YAAY,YAAY,WAAW,CAAC,CAAC;AAAA,IAC1D,YAAY;AACV,UAAI,iBAAkB,QAAO;AAC7B,yBAAmB,MAAM,YAAY,OAAO;AAC5C,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAmCO,MAAM,WAAW;AACvB,SAAiB,QAAQ,CACxB,MACA,WACiC;AACjC,MAAI,IAAI,eAAe,IAAI,GAAG;AAC5B,WAAO,IAAI,MAAM,MAAM,MAAM;AAAA,EAC/B;AACA,MAAI,OAAO,kBAAkB,IAAI,GAAG;AAClC,WAAO,OAAO,MAAM,MAAM,MAAM;AAAA,EAClC;AAEA,SAAO,OAAO,MAAM,MAAM,MAAM;AAClC;AACA,SAAS,WAAW,CAClB,MACA,WAC0D;AAC1D,SAAO,SAAS,MAAM,MAAM,MAAM;AACpC;AAEA,IAAO,mBAAQ;","names":["import_utils"]}