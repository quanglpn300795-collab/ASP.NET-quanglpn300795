{"version":3,"sources":["../../src/googleai/imagen.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionMetadata,\n  MediaPart,\n  MessageData,\n  modelActionMetadata,\n  z,\n  type Genkit,\n} from 'genkit';\nimport {\n  getBasicUsageStats,\n  modelRef,\n  type GenerateRequest,\n  type ModelAction,\n  type ModelInfo,\n  type ModelReference,\n} from 'genkit/model';\nimport { imagenPredict } from './client.js';\nimport type {\n  ClientOptions,\n  GoogleAIPluginOptions,\n  ImagenParameters,\n  ImagenPredictRequest,\n  ImagenPrediction,\n  Model,\n} from './types.js';\nimport {\n  calculateApiKey,\n  checkApiKey,\n  checkModelName,\n  extractImagenImage,\n  extractText,\n  extractVersion,\n  modelName,\n} from './utils.js';\n\n/**\n * See https://ai.google.dev/gemini-api/docs/image-generation#imagen-model\n */\nexport const ImagenConfigSchema = z\n  .object({\n    apiKey: z\n      .string()\n      .describe('Override the API key provided at plugin initialization.')\n      .optional(),\n\n    numberOfImages: z\n      .number()\n      .describe(\n        'The number of images to generate, from 1 to 4 (inclusive). The default is 1.'\n      )\n      .optional(),\n    aspectRatio: z\n      .enum(['1:1', '9:16', '16:9', '3:4', '4:3'])\n      .describe('Desired aspect ratio of the output image.')\n      .optional(),\n    personGeneration: z\n      .enum(['dont_allow', 'allow_adult', 'allow_all'])\n      .describe(\n        'Control if/how images of people will be generated by the model.'\n      )\n      .optional(),\n  })\n  .passthrough();\nexport type ImagenConfigSchemaType = typeof ImagenConfigSchema;\nexport type ImagenConfig = z.infer<ImagenConfigSchemaType>;\n\n// This contains all the schemas for imagen models.\ntype ConfigSchemaType = ImagenConfigSchemaType;\n\nfunction commonRef(\n  name: string,\n  info?: ModelInfo,\n  configSchema: ConfigSchemaType = ImagenConfigSchema\n): ModelReference<ConfigSchemaType> {\n  return modelRef({\n    name: `googleai/${name}`,\n    configSchema,\n    info: info ?? {\n      supports: {\n        media: true,\n        multiturn: false,\n        tools: false,\n        toolChoice: false,\n        systemRole: false,\n        output: ['media'],\n      },\n    },\n  });\n}\n\n// Allow all the capabilities for unknown future models\nconst GENERIC_MODEL = commonRef('imagen', {\n  supports: {\n    media: true,\n    multiturn: true,\n    tools: true,\n    systemRole: true,\n    output: ['media'],\n  },\n});\n\nconst KNOWN_MODELS = {\n  'imagen-3.0-generate-002': commonRef('imagen-3.0-generate-002'),\n  'imagen-4.0-generate-preview-06-06': commonRef(\n    'imagen-4.0-generate-preview-06-06'\n  ),\n  'imagen-4.0-ultra-generate-preview-06-06': commonRef(\n    'imagen-4.0-ultra-generate-preview-06-06'\n  ),\n} as const;\nexport type KnownModels = keyof typeof KNOWN_MODELS; // For autocomplete\n\n// For conditional types in index.ts model()\nexport type ImagenModelName = `imagen-${string}`;\nexport function isImagenModelName(value?: string): value is ImagenModelName {\n  return !!value?.startsWith('imagen-');\n}\n\nexport function model(\n  version: string,\n  config: ImagenConfig = {}\n): ModelReference<ConfigSchemaType> {\n  const name = checkModelName(version);\n  if (KNOWN_MODELS[name]) {\n    return KNOWN_MODELS[name].withConfig(config);\n  }\n\n  return modelRef({\n    name: `googleai/${name}`,\n    config,\n    configSchema: ImagenConfigSchema,\n    info: {\n      ...GENERIC_MODEL.info,\n    },\n  });\n}\n\nexport function listActions(models: Model[]): ActionMetadata[] {\n  return models\n    .filter(\n      (m) =>\n        m.supportedGenerationMethods.includes('predict') &&\n        isImagenModelName(modelName(m.name))\n    )\n    .filter((m) => !m.description || !m.description.includes('deprecated'))\n    .map((m) => {\n      const ref = model(m.name);\n      return modelActionMetadata({\n        name: ref.name,\n        info: ref.info,\n        configSchema: ref.configSchema,\n      });\n    });\n}\n\nexport function defineKnownModels(ai: Genkit, options?: GoogleAIPluginOptions) {\n  for (const name of Object.keys(KNOWN_MODELS)) {\n    defineModel(ai, name, options);\n  }\n}\n\nexport function defineModel(\n  ai: Genkit,\n  name: string,\n  pluginOptions?: GoogleAIPluginOptions\n): ModelAction {\n  checkApiKey(pluginOptions?.apiKey);\n  const ref = model(name);\n  const clientOptions: ClientOptions = {\n    apiVersion: pluginOptions?.apiVersion,\n    baseUrl: pluginOptions?.baseUrl,\n  };\n\n  return ai.defineModel(\n    {\n      apiVersion: 'v2',\n      name: ref.name,\n      ...ref.info,\n      configSchema: ref.configSchema,\n    },\n    async (request, { abortSignal }) => {\n      const clientOpt = { ...clientOptions, signal: abortSignal };\n      const imagenPredictRequest: ImagenPredictRequest = {\n        instances: [\n          {\n            prompt: extractText(request),\n            image: extractImagenImage(request),\n          },\n        ],\n        parameters: toImagenParameters(request),\n      };\n\n      const predictApiKey = calculateApiKey(\n        pluginOptions?.apiKey,\n        request.config?.apiKey\n      );\n\n      const response = await imagenPredict(\n        predictApiKey,\n        extractVersion(ref),\n        imagenPredictRequest,\n        clientOpt\n      );\n\n      if (!response.predictions || response.predictions.length == 0) {\n        throw new Error(\n          'Model returned no predictions. Possibly due to content filters.'\n        );\n      }\n\n      const message: MessageData = {\n        role: 'model',\n        content: response.predictions.map(fromImagenPrediction),\n      };\n\n      return {\n        finishReason: 'stop',\n        message,\n        usage: getBasicUsageStats(request.messages, message),\n        custom: response,\n      };\n    }\n  );\n}\n\nfunction fromImagenPrediction(p: ImagenPrediction): MediaPart {\n  const b64data = p.bytesBase64Encoded;\n  const mimeType = p.mimeType;\n  return {\n    media: {\n      url: `data:${mimeType};base64,${b64data}`,\n      contentType: mimeType,\n    },\n  };\n}\n\nfunction toImagenParameters(\n  request: GenerateRequest<typeof ImagenConfigSchema>\n): ImagenParameters {\n  const out = {\n    sampleCount: request.config?.numberOfImages ?? 1,\n    ...request?.config,\n  };\n\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n\n  // This is not part of the request parameters sent to the endpoint\n  // It's pulled out and used separately\n  delete out.apiKey;\n\n  return out;\n}\n\nexport const TEST_ONLY = {\n  toImagenParameters,\n  fromImagenPrediction,\n  GENERIC_MODEL,\n  KNOWN_MODELS,\n};\n"],"mappings":"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","names":[]}