{"version":3,"sources":["../../src/googleai/utils.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateRequest, GenkitError } from 'genkit';\nimport process from 'process';\nimport { extractMedia } from '../common/utils.js';\nimport { ImagenInstance, VeoImage } from './types.js';\n\nexport {\n  checkModelName,\n  cleanSchema,\n  extractText,\n  extractVersion,\n  modelName,\n} from '../common/utils.js';\n\n/**\n * Retrieves an API key from environment variables.\n *\n * @returns The API key as a string, or `undefined` if none of the specified\n *          environment variables are set.\n */\nexport function getApiKeyFromEnvVar(): string | undefined {\n  return (\n    process.env.GEMINI_API_KEY ||\n    process.env.GOOGLE_API_KEY ||\n    process.env.GOOGLE_GENAI_API_KEY\n  );\n}\n\nexport const MISSING_API_KEY_ERROR = new GenkitError({\n  status: 'FAILED_PRECONDITION',\n  message:\n    'Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\n' +\n    'For more details see https://genkit.dev/docs/plugins/google-genai/',\n});\n\nexport const API_KEY_FALSE_ERROR = new GenkitError({\n  status: 'INVALID_ARGUMENT',\n  message:\n    'GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.',\n});\n\n/**\n * Checks and retrieves an API key based on the provided argument and environment variables.\n *\n * - If `pluginApiKey` is a non-empty string, it's used as the API key.\n * - If `pluginApiKey` is `undefined` or an empty string, it attempts to fetch the API key from environment\n * - If `pluginApiKey` is `false`, key retrieval from the environment is skipped, and the function\n *   will return `undefined`. This mode indicates that the API key is expected to be provided\n *   at a later stage or in a different context.\n *\n * @param pluginApiKey - An optional API key string, `undefined` to check the environment, or `false` to bypass all checks in this function.\n * @returns The resolved API key as a string, or `undefined` if `pluginApiKey` is `false`.\n * @throws {Error} MISSING_API_KEY_ERROR - Thrown if `pluginApiKey` is not `false` and no API key\n *   can be found either in the `pluginApiKey` argument or from the environment.\n */\nexport function checkApiKey(\n  pluginApiKey: string | false | undefined\n): string | undefined {\n  let apiKey: string | undefined;\n\n  // Don't get the key from the environment if pluginApiKey is false\n  if (pluginApiKey !== false) {\n    apiKey = pluginApiKey || getApiKeyFromEnvVar();\n  }\n\n  // If pluginApiKey is false, then we don't throw because we are waiting for\n  // the apiKey passed into the individual call\n  if (pluginApiKey !== false && !apiKey) {\n    throw MISSING_API_KEY_ERROR;\n  }\n  return apiKey;\n}\n\n/**\n * Calculates and returns the effective API key based on multiple potential sources.\n * The order of precedence for determining the API key is:\n * 1. `requestApiKey` (if provided)\n * 2. `pluginApiKey` (if provided and not `false`)\n * 3. Environment variable (if `pluginApiKey` is not `false` and `pluginApiKey` is not provided)\n *\n * @param pluginApiKey - The apiKey value provided during plugin initialization.\n * @param requestApiKey - The apiKey provided to an individual generate call.\n * @returns The resolved API key as a string.\n * @throws {Error} API_KEY_FALSE_ERROR - Thrown if `pluginApiKey` is `false` and `requestApiKey` is not provided\n * @throws {Error} MISSING_API_KEY_ERROR - Thrown if no API key can be resolved from any source\n */\nexport function calculateApiKey(\n  pluginApiKey: string | false | undefined,\n  requestApiKey: string | undefined\n): string {\n  let apiKey: string | undefined;\n\n  // Don't get the key from the environment if pluginApiKey is false\n  if (pluginApiKey !== false) {\n    apiKey = pluginApiKey || getApiKeyFromEnvVar();\n  }\n\n  apiKey = requestApiKey || apiKey;\n\n  if (pluginApiKey === false && !requestApiKey) {\n    throw API_KEY_FALSE_ERROR;\n  }\n\n  if (!apiKey) {\n    throw MISSING_API_KEY_ERROR;\n  }\n  return apiKey;\n}\n\nexport function extractVeoImage(\n  request: GenerateRequest\n): VeoImage | undefined {\n  const media = request.messages.at(-1)?.content.find((p) => !!p.media)?.media;\n  if (media) {\n    const img = media.url.split(',')[1];\n    if (img && media.contentType) {\n      return {\n        bytesBase64Encoded: img,\n        mimeType: media.contentType!,\n      };\n    } else if (img) {\n      // Content Type is not optional\n      throw new GenkitError({\n        status: 'INVALID_ARGUMENT',\n        message: 'content type is required for images',\n      });\n    }\n  }\n  return undefined;\n}\n\nexport function extractImagenImage(\n  request: GenerateRequest\n): ImagenInstance['image'] | undefined {\n  const image = extractMedia(request, {\n    metadataType: 'base',\n    isDefault: true,\n  })?.url.split(',')[1];\n\n  if (image) {\n    return { bytesBase64Encoded: image };\n  }\n  return undefined;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,oBAA6C;AAC7C,qBAAoB;AACpB,mBAA6B;AAG7B,IAAAA,gBAMO;AAQA,SAAS,sBAA0C;AACxD,SACE,eAAAC,QAAQ,IAAI,kBACZ,eAAAA,QAAQ,IAAI,kBACZ,eAAAA,QAAQ,IAAI;AAEhB;AAEO,MAAM,wBAAwB,IAAI,0BAAY;AAAA,EACnD,QAAQ;AAAA,EACR,SACE;AAEJ,CAAC;AAEM,MAAM,sBAAsB,IAAI,0BAAY;AAAA,EACjD,QAAQ;AAAA,EACR,SACE;AACJ,CAAC;AAgBM,SAAS,YACd,cACoB;AACpB,MAAI;AAGJ,MAAI,iBAAiB,OAAO;AAC1B,aAAS,gBAAgB,oBAAoB;AAAA,EAC/C;AAIA,MAAI,iBAAiB,SAAS,CAAC,QAAQ;AACrC,UAAM;AAAA,EACR;AACA,SAAO;AACT;AAeO,SAAS,gBACd,cACA,eACQ;AACR,MAAI;AAGJ,MAAI,iBAAiB,OAAO;AAC1B,aAAS,gBAAgB,oBAAoB;AAAA,EAC/C;AAEA,WAAS,iBAAiB;AAE1B,MAAI,iBAAiB,SAAS,CAAC,eAAe;AAC5C,UAAM;AAAA,EACR;AAEA,MAAI,CAAC,QAAQ;AACX,UAAM;AAAA,EACR;AACA,SAAO;AACT;AAEO,SAAS,gBACd,SACsB;AACtB,QAAM,QAAQ,QAAQ,SAAS,GAAG,EAAE,GAAG,QAAQ,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,GAAG;AACvE,MAAI,OAAO;AACT,UAAM,MAAM,MAAM,IAAI,MAAM,GAAG,EAAE,CAAC;AAClC,QAAI,OAAO,MAAM,aAAa;AAC5B,aAAO;AAAA,QACL,oBAAoB;AAAA,QACpB,UAAU,MAAM;AAAA,MAClB;AAAA,IACF,WAAW,KAAK;AAEd,YAAM,IAAI,0BAAY;AAAA,QACpB,QAAQ;AAAA,QACR,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AACA,SAAO;AACT;AAEO,SAAS,mBACd,SACqC;AACrC,QAAM,YAAQ,2BAAa,SAAS;AAAA,IAClC,cAAc;AAAA,IACd,WAAW;AAAA,EACb,CAAC,GAAG,IAAI,MAAM,GAAG,EAAE,CAAC;AAEpB,MAAI,OAAO;AACT,WAAO,EAAE,oBAAoB,MAAM;AAAA,EACrC;AACA,SAAO;AACT;","names":["import_utils","process"]}